新しいポケモンのソフトがやりたい。
今作はpokemon scarlet & violetというらしい。
行け！ピカチュウ! １０万ボルト!。
level 1
damage ２６
おのののか



Hardware abstraction
From Wikipedia, the free encyclopedia
Jump to navigationJump to search
"Hardware Abstraction Layer" redirects here. For the UNIX-like operating system subsystem, see HAL (software).
Hardware abstractions are sets of routines in software that provide programs with access to hardware resources through programming interfaces. The programming interface allows all devices in a particular class C of hardware devices to be accessed through identical interfaces even though C may contain different subclasses of devices that each provide a different hardware interface.

Hardware abstractions often allow programmers to write device-independent, high performance applications by providing standard operating system (OS) calls to hardware. The process of abstracting pieces of hardware is often done from the perspective of a CPU. Each type of CPU has a specific instruction set architecture or ISA. The ISA represents the primitive operations of the machine that are available for use by assembly programmers and compiler writers. One of the main functions of a compiler is to allow a programmer to write an algorithm in a high-level language without having to care about CPU-specific instructions. Then it is the job of the compiler to generate a CPU-specific executable. The same type of abstraction is made in operating systems, but OS APIs now represent the primitive operations of the machine, rather than an ISA. This allows a programmer to use OS-level operations (e.g. task creation/deletion) in their programs while retaining portability over a variety of different platforms.


Contents
1	Overview
2	In operating systems
2.1	Microsoft Windows
2.2	AS/400
2.3	Android
3	See also
4	References
5	Further reading
Overview
Many early computer systems did not have any form of hardware abstraction. This meant that anyone writing a program for such a system would have to know how each hardware device communicated with the rest of the system. This was a significant challenge to software developers since they then had to know how every hardware device in a system worked to ensure the software's compatibility. With hardware abstraction, rather than the program communicating directly with the hardware device, it communicates to the operating system what the device should do, which then generates a hardware-dependent instruction to the device. This meant programmers didn't need to know how specific devices worked, making their programs compatible with any device.

An example of this might be a "Joystick" abstraction. The joystick device, of which there are many physical implementations, is readable/writable through an API which many joystick-like devices might share. Most joystick-devices might report movement directions. Many joystick-devices might have sensitivity-settings that can be configured by an outside application. A Joystick abstraction hides details (e.g., register format, I2C address) of the hardware so that a programmer using the abstracted API, does not need to understand the details of the device's physical interface. This also allows code reuse since the same code can process standardized messages from any kind of implementation which supplies the "joystick" abstraction. A "nudge forward" can be from a potentiometer or from a capacitive touch sensor that recognises "swipe" gestures, as long as they both provide a signal related to "movement".

As physical limitations (e.g. resolution of sensor, temporal update frequency) may vary with hardware, an API can do little to hide that, other than by assuming a "least common denominator" model. Thus, certain deep architectural decisions from the implementation may become relevant to users of a particular instantiation of an abstraction.

A good metaphor is the abstraction of transportation. Both bicycling and driving a car are transportation. They both have commonalities (e.g., you must steer) and physical differences (e.g., use of feet). One can always specify the abstraction "drive to" and let the implementor decide whether bicycling or driving a car is best. The "wheeled terrestrial transport" function is abstracted and the details of "how to drive" are encapsulated.

Examples of "abstractions" on a PC include video input, printers, audio input and output, block devices (e.g. hard disk drives or USB flash drive), etc.

In certain computer science domains, such as operating systems or embedded systems, the abstractions have slightly different appearances (for instance, Operating Systems tend to have more standardized interfaces), but the concept of abstraction and encapsulation of complexity are common, and deep.

The hardware abstraction layer reside below the application programming interface (API) in a software stack, whereas the application layer (often written in a high level language) resides above the API and communicates with the hardware by calling functions in the API.

In operating systems
A hardware abstraction layer (HAL) is an abstraction layer, implemented in software, between the physical hardware of a computer and the software that runs on that computer. Its function is to hide differences in hardware from most of the operating system kernel, so that most of the kernel-mode code does not need to be changed to run on systems with different hardware. On Microsoft Windows, HAL can basically be considered to be the driver for the motherboard and allows instructions from higher level computer languages to communicate with lower level components, but prevents direct access to the hardware.

CP/M (CP/M BIOS), DOS (DOS BIOS), Solaris, Linux, BSD, macOS, and some other portable operating systems also have a HAL, even if it is not explicitly designated as such. Some operating systems, such as Linux, have the ability to insert one while running, like Adeos. The NetBSD operating system is widely known as having a clean hardware abstraction layer which allows it to be highly portable.[1] As part of this system are uvm(9)/pmap(9), bus_space(9), bus_dma(9) and other subsystems. Popular buses which are used on more than one architecture are also abstracted, such as ISA, EISA, PCI, PCIe, etc., allowing drivers to also be highly portable with a minimum of code modification.

Operating systems having a defined HAL are more easily portable across different hardware. This is especially important for embedded systems that run on dozens of different platforms.

Microsoft Windows
The Windows NT kernel has a HAL in the kernel space between hardware and the executive services that are contained in the file NTOSKRNL.EXE[2][3] under %WINDOWS%\system32\hal.dll. This allows portability of the Windows NT kernel-mode code to a variety of processors, with different memory management unit architectures, and a variety of systems with different I/O bus architectures; most of that code runs without change on those systems, when compiled for the instruction set applicable to those systems. For example, the SGI Intel x86-based workstations were not IBM PC compatible workstations, but due to the HAL, Windows 2000 was able to run on them.[4][failed verification]

Since Windows Vista and Windows Server 2008, the HAL used is automatically determined during startup.[5]

AS/400
An "extreme" example of a HAL can be found in the System/38 and AS/400 architectures, currently implemented in the IBM i operating system. Most compilers for those systems generate an abstract machine code; the Licensed Internal Code, or LIC, translates this virtual machine code into native code for the processor on which it is running and executes the resulting native code.[6] (The exceptions are compilers that generate the LIC itself; those compilers are not available outside IBM.) This was so successful that application software and operating system software above the LIC layer that were compiled on the original S/38 run without modification and without recompilation on the latest AS/400 systems, despite the fact that the underlying hardware has been changed dramatically; at least three different types of processors have been in use.[6]

Android
Android introduced a HAL known as the "vendor interface" (codenamed "Project Treble") on version 8.0 "Oreo". It abstracts low-level code from the Android OS framework, and they must be made forward compatible to support future versions of Android to ease the development of firmware updates.[7] Before Project Treble Android relied on various non-standardized legacy HALs.[8]

Halium is an Android-based HAL used by several mobile operating systems such as Ubuntu Touch and LuneOS to run on smartphones with Android pre-installed.

See also
Basic Input/Output System (BIOS)
Unified Extensible Firmware Interface (UEFI)
Firmware
Advanced Configuration and Power Interface (ACPI)
Device tree
Board support package (BSP)
DeviceKit
Haiku Device Kit
HAL (software)
Hardware-dependent software (HDS)
Nanokernel
Picokernel
Protection ring
References
 "Portability and supported hardware platforms". The NetBSD Foundation. Retrieved 2009-05-12.
 "Windows NT Hardware Abstraction Layer (HAL)". Microsoft. 2006-10-31. Retrieved 2007-08-25.
 Custer, Helen (1993), Inside Windows NT, Microsoft Press, Bibcode:1993iwn..book.....C
 "Changing hardware abstraction layer in Windows 2000 / XP – Smallvoid.com". Retrieved 2020-09-18.
 Russinovich, Mark E.; Solomon, David A.; Ionescu, Alex (2008). Windows Internals: Including Windows Server 2008 and Windows Vista (5 ed.). Redmond, Washington, USA: Microsoft Press. p. 65. ISBN 978-0-7356-2530-3.
 Soltis, Frank G. (1997). Inside the AS/400: Featuring the AS/400e Series (2 ed.). Loveland, Colorado, USA: Duke Press. ISBN 978-1-882419-66-1.
 "Google's "Project Treble" solves one of Android's many update roadblocks". Ars Technica. 12 May 2017. Retrieved 12 May 2017.
 "Conventional & legacy HALs". Android Open Source Project.
Further reading
"Advanced RISC Computing Specification" (PDF). MIPS Technologies. p. 23. Retrieved 2013-02-26.
Silberschatz, Abraham; Galvin, Peter Bear; Gagne, Greg (2002). Operating System Concepts (6 ed.). ISBN 0-471-41743-2.
vte
Operating systems
General	
ComparisonForensic engineeringHistoryListTimelineUsage shareUser features comparison
Variants	
Disk operating systemDistributed operating systemEmbedded operating systemHobbyist operating systemJust enough operating systemMobile operating systemNetwork operating systemObject-oriented operating systemReal-time operating systemSupercomputer operating system
Kernel	
Architectures	
ExokernelHybridMicrokernelMonolithicMultikernelvkernelRump kernelUnikernel
Components	
Device driverLoadable kernel moduleUser space and kernel space
Process management	
Concepts	
Computer multitasking (Cooperative, Preemptive)Context switchInterruptIPCProcessProcess control blockReal-timeThreadTime-sharing
Scheduling
algorithms	
Fixed-priority preemptiveMultilevel feedback queueRound-robinShortest job next
Memory management,
resource protection	
Bus errorGeneral protection faultMemory pagingMemory protectionProtection ringSegmentation faultVirtual memory
Storage access,
file systems	
Boot loaderDefragmentationDevice fileFile attributeInodeJournalPartitionVirtual file systemVirtual tape library
Supporting concepts	
APIComputer networkHALLive CDLive USBShell CLIUser interfacePXE
Categories: Operating system technologyFirmware
Navigation menu
Not logged in
Talk
Contributions
Create account
Log in
ArticleTalk
ReadEditView history
Search Wikipedia
Main page
Contents
Current events
Random article
About Wikipedia
Contact us
Donate
Contribute
Help
Learn to edit
Community portal
Recent changes
Upload file
Tools
What links here
Related changes
Special pages
Permanent link
Page information
Cite this page
Wikidata item
Print/export
Download as PDF
Printable version

Languages
Deutsch
Español
Français
한국어
Bahasa Indonesia
日本語
Português
Русский
中文
10 more
Edit links
This page was last edited on 30 October 2022, at 06:28 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License 3.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policyAbout WikipediaDisclaimersContact WikipediaMobile viewDevelopersStatisticsCookie statementWikimedia FoundationPowered by MediaWiki